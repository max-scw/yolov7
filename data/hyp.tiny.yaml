lr0: 0.01  # initial learning rate (SGD=1E-2, Adam=1E-3)
lrf: 0.01  # final OneCycleLR learning rate (lr0 * lrf)
momentum: 0.937  # SGD momentum/Adam beta1
weight_decay: 0.0005  # optimizer weight decay 5e-4
warmup_epochs: 3.0  # warmup epochs (fractions ok)
warmup_momentum: 0.8  # warmup initial momentum
warmup_bias_lr: 0.1  # warmup initial bias lr
box: 0.05  # box loss gain
cls: 0.5  # cls loss gain
cls_pw: 1.0  # cls BCELoss (binary cross-entropy) positive_weight
obj: 1.0  # obj loss gain (scale with pixels)
obj_pw: 1.0  # obj BCELoss (binary cross-entropy) positive_weight
#iou_t: 0.20  # IoU training threshold  | DOES THIS HAS ANY EFFECT?
anchor_t: 4.0  # anchor-multiple threshold
#anchors: 3  # anchors per output layer (0 to ignore)
fl_gamma: 0.0  # focal loss gamma (efficientDet default gamma=1.5, RetinaNet gamma=2.0)
#fl_alpha: 0.25  # focal loss alpha (usually in 0.25-0.75. Less sensitive than gamma. RetinaNet + YOLOv7 use 0.25; default: 0.25)
qfl: 1 # use quality focal loss, True/False = 1/0
hsv_h: 0.015  # image HSV-Hue augmentation (fraction)
hsv_s: 0.7  # image HSV-Saturation augmentation (fraction)
hsv_v: 0.5  # image HSV-Value augmentation (fraction)
degrees: 0.0  # image rotation (+/- deg) | random_perspective()
translate: 0.0  # image translation (+/- fraction) | random_perspective()
scale: 0.0  # image scale (+/- gain) | random_perspective()
shear: 1.0  # image shear (+/- deg) | random_perspective()
perspective: 0.0001  # image perspective (+/- fraction), range 0-0.001 | random_perspective()
#flipud: 0.0  # image flip up-down (probability)
#fliplr: 0.0  # image flip left-right (probability)
ablumentation_p: 0.2  # probability for albumentation augmentation package
mosaic: 0.3  # image mosaic (probability)
mixup: 0.05  # image mixup (probability)
copy_paste: 0.0  # image copy paste (probability)
paste_in: 0.00  # image copy paste (probability), use 0 for faster training
loss_ota: 1 # use ComputeLossOTA, use 0 for faster training
